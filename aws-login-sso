#!/usr/bin/env bash
set -o pipefail

readonly filter=${2:-''}

aws_default_region='us-east-1'
aws_cache_session_file="${HOME}/.aws/.sso-temp-creds"

C_BLUE=$(tput setaf 4)
C_GREEN=$(tput setaf 2)
C_RED=$(tput setaf 1)
C_B_BLUE="${T_BOLD}$(tput bold)$(tput setaf 4)"
C_B_GREEN="${T_BOLD}$(tput setaf 2)"
C_B_RED="${T_BOLD}$(tput setaf 1)"
C_RESET=$(tput sgr0)
T_BOLD=$(tput bold)


info() {
  local left="${C_B_BLUE}[${C_RESET}${T_BOLD} ** ${C_B_BLUE}]${C_RESET} -"
  local msg="$@"
  printf "%s %s\n" "${left}" "$T_BOLD${msg}${C_RESET}"
  sleep .25
}



choose_account() {
  aws configure list-profiles \
    | sort -k 3 \
    | fzf -q "${filter}" -1
}


sso_login() {
  aws sso login --profile $1
}


fetch_temp_creds() {
  local profile=$1
  local max_tries=${2:-0}

  if ((max_tries>2)); then
    return 1
  fi

  ((max_tries++));

  info "Initializing credential process..."
  aws-sso-util credential-process --profile $profile 2> /dev/null | jq -r --arg profile $profile '. + {Account: $profile}'  > $aws_cache_session_file \
  || {
    info "Initializing SSO..."
    sso_login $profile
    fetch_temp_creds $profile
  }
}


load_session() {
  if ! test -s $aws_cache_session_file; then
    return 1
  fi

  local _session=$(cat $aws_cache_session_file)
  local _access_key=$(echo $_session | jq -r '.AccessKeyId')
  local _secret_key=$(echo $_session | jq -r '.SecretAccessKey')
  local _token=$(echo $_session | jq -r '.SessionToken')
  local _account=$(echo $_session | jq -r '.Account')


  info "Loading aws session from ${C_RED}'${aws_cache_session_file}' ${C_RESET}..."
  export AWS_ACCESS_KEY_ID=$_access_key
  export AWS_SECRET_ACCESS_KEY=$_secret_key
  export AWS_SESSION_TOKEN=$_token
  export AWS_SESSION_NAME=$_account
  export AWS_REGION=$aws_default_region
}


aws_renew_token() {
  local account=$(cat $aws_cache_session_file | jq -r '.Account')
  fetch_temp_creds $account
  load_session
}


check_cli_connection() {
  aws sts get-caller-identity &> /dev/null
}




login() {
  account=$(choose_account)
  if test -z "${account}"; then
    return 1
  fi

  fetch_temp_creds $account
  load_session
}


aws_logout() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_SESSION_NAME

  rm $aws_cache_session_file &> /dev/null
  aws sso logout &> /dev/null
}



case $1 in
  --restore) load_session;;
 --re-login) aws_renew_token ;;
   --logout) aws_logout ;;
    --login)
      shift
      login $@ ;;
esac


