#!/usr/bin/env bash
_assume_rol='__________YOUR_______ROLE_________HERE____________'

# CMD ARGS
_script_name=$0
_filter_account=${2:-''}

_accounts_cache_file="${HOME}/.aws/.cache/accounts.json"
_aws_cache_session="${HOME}/.aws/.cache/session.json"
_fzf_select='.Accounts | .[] | (.Id + " -- " +.Name)'


C_BLUE=$(tput setaf 4)
C_GREEN=$(tput setaf 2)
C_RED=$(tput setaf 1)
C_B_BLUE="${T_BOLD}$(tput bold)$(tput setaf 4)"
C_B_GREEN="${T_BOLD}$(tput setaf 2)"
C_B_RED="${T_BOLD}$(tput setaf 1)"
C_RESET=$(tput sgr0)
T_BOLD=$(tput bold)


info() {
  local left="${C_B_BLUE}[${C_RESET}${T_BOLD} ** ${C_B_BLUE}]${C_RESET} -"
  local msg="$@"
  printf "%s %s\n" "${left}" "$T_BOLD${msg}${C_RESET}"
  sleep .25
}



check_cache_file() {
  if ! test -s ${_accounts_cache_file}; then
    info "Cache file not found..."
    info "Fetching accounts..."
    aws organizations list-accounts > $_accounts_cache_file
  fi
}




choose_aws_account() {
  cat $_accounts_cache_file \
    | jq -r "${_fzf_select}" \
    | sort -k 3 \
    | fzf -q "${_filter_account}" -1 --preview="$_script_name --preview {}"
    #| fzf -q "${_filter_account}" -1 --preview="~/.tools/aws-preview-account-cached {}"
}



load_session() {
  if ! test -s $_aws_cache_session; then
    return 1
  fi

  local _session=$(cat $_aws_cache_session)
  local _access_key=$(echo $_session | jq -r '.Credentials | .AccessKeyId')
  local _secret_key=$(echo $_session | jq -r '.Credentials | .SecretAccessKey')
  local _token=$(echo $_session | jq -r '.Credentials | .SessionToken')
  local _account_label=$(echo $_session | jq -r '.AssumedRoleUser | .Arn' | cut -d'/' -f3)


  info "Loading aws session from ${C_RED}'${_aws_cache_session}' ${C_RESET}..."
  export AWS_ACCESS_KEY_ID=$_access_key
  export AWS_SECRET_ACCESS_KEY=$_secret_key
  export AWS_SESSION_TOKEN=$_token
  export AWS_SESSION_NAME=$_account_label
}

# if has assumed a rol into shell
# cannot assumed another
# it necessary clear the session
aws_logout() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_SESSION_NAME
  rm $_aws_cache_session &> /dev/null
}


assume_role() {
  local _account=$1
  if [[ "${_account}" == "" ]]; then
    return
  fi

  local _id=$(echo $_account | awk '{print $1}')
  local _name=$(echo $_account | awk '{print $3}')

  aws_logout

  local role="arn:aws:iam::${_id}:role/${_assume_rol}"
  info "Assuming Role ${C_RED}'${role}' ${C_RESET}..."
  info "Session alive for ${C_RED}'1'${C_RESET} hour..."

   aws sts assume-role \
     --role-arn "${role}" \
     --role-session-name "${_name}@aws" > $_aws_cache_session \
     --duration-seconds 3600
     #--role-session-name "${_assume_rol}@${_name}" > $_aws_cache_session
}


preview_account() {
  local _account=$1
  if test -z $_account; then
    return 1
  fi

  id=$(echo $_account | awk '{print $1}')
  cat $_accounts_cache_file \
    | jq -r --arg id $id '.Accounts | .[] | select(.Id == $id)'
}


aws_restore() {
 load_session
}


aws_renew_token() {
  local arn=$(cat $_aws_cache_session | jq -r '.AssumedRoleUser | .Arn')
  local id=$(echo $arn | cut -d':' -f5)
  local account_name=$(echo $arn | cut -d'/' -f3 | cut -d'@' -f-1)

  info "Renew token for ${C_RED}'${account_name}' ${C_RESET}..."
  assume_role "${id} -- ${account_name}"
  load_session
}


login() {
  check_cache_file
  _account=$(choose_aws_account)
  if test -z "${_account}"; then
    return 1
  fi

  assume_role "${_account}"
  load_session
}


case $1 in
  --preview) preview_account $2 ;;
   --logout) aws_logout ;;
  --restore) aws_restore ;;
 --re-login) aws_renew_token ;;
    --login)
      shift
      login $@ ;;
esac